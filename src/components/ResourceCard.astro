---
interface Props {
  title: string;
  description: string;
  url: string;
  thumbnail: string;
  categories: string[];
}

const { title, description, url, thumbnail, categories } = Astro.props;
---

<article class="resource-card bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-200">
  <div class="aspect-w-16 aspect-h-9">
    <img
      src={thumbnail}
      alt={title}
      class="w-full h-full object-cover"
    />
  </div>
  <div class="p-6">
    <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
      {title}
    </h3>
    <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-2">
      {description}
    </p>
    <div class="flex flex-wrap gap-2 mb-4">
      {categories.map((category) => (
        <span class="category-tag px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 text-sm rounded-full">
          {category}
        </span>
      ))}
    </div>
    <a
      href={url}
      target="_blank"
      rel="noopener noreferrer"
      class="inline-flex items-center px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 transition-colors duration-200 gap-1 text-sm font-medium"
    >
      Visit Resource
    </a>
  </div>
</article>

<script>
  // Bookmark functionality
  document.querySelectorAll('[data-resource-id]').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      const resourceId = button.getAttribute('data-resource-id');
      const bookmarks = JSON.parse(localStorage.getItem('bookmarks') || '[]');
      
      if (bookmarks.includes(resourceId)) {
        const newBookmarks = bookmarks.filter((id: string) => id !== resourceId);
        localStorage.setItem('bookmarks', JSON.stringify(newBookmarks));
        button.classList.remove('text-yellow-500');
      } else {
        bookmarks.push(resourceId);
        localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
        button.classList.add('text-yellow-500');
      }
    });
  });

  // Share functionality
  document.querySelectorAll('[data-share]').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      const platform = button.getAttribute('data-share');
      const url = encodeURIComponent(window.location.href);
      const title = encodeURIComponent(document.title);
      
      let shareUrl;
      switch (platform) {
        case 'twitter':
          shareUrl = `https://twitter.com/intent/tweet?url=${url}&text=${title}`;
          break;
        case 'linkedin':
          shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${title}`;
          break;
      }
      
      if (shareUrl) {
        window.open(shareUrl, '_blank', 'width=600,height=400');
      }
    });
  });
</script> 